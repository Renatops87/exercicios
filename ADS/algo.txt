Um funcionário de uma empresa recebe, anualmente, aumento salarial. Sabe-se que: a) Esse funcionário contratado em 2005, com salário inicial de R$1.000,00; b) Em 2006, ele recebeu aumento de 1,5% sobre seu salário inicial; c) A partir de 2007 (inclusive), os aumentos salariais sempre corresponderam ao dobro do percentual do ano anterior. Faça um programa que determine o salario atual desse funcionário.

Algotitmo salario
	var salario, percentual: Real
	i: Inteiro
Inicio
	percentual <- 1.5
	salario <- 1000
	para (i = 2006; i <= 2018; i++)
		se(i = 2006) então
			salario = salario + salario * percentual/100;
		senão
		  	salario = salario + (salario * ((percentual * 2)/100)))
		fim_se
	fim_para
	escreva("O salário atual é: ", salario)

fim;

Faça um programa para calcular a área de um triângulo e que não permita a entrada de dados inválidos, ou seja, medidas menores ou iguais a 0.

Algoritmo areatriangulo
	var lado, i, soma: Inteiro
	    area: Real
Inicio	
	i <- 1												
	soma <- 0											
	Escreva("Cálculo área triângulo retângulo")							
	Enquanto(i <= 2) faca
		Escreva("Digite a medida do lado ", i , ":")						
		Leia(lado)										
		Se((lado = 0) ou (lado < 0)) então
			Escreva("Medida inválida")							
		Senão
			soma = soma + lado
			i <- i + 1
		Fim_se
	Fim_enquanto
	
	area <- soma / 2
	Escreva("O valor da área do triangulo é: ", area)  
Fim

Faça um programa que receba o salário de um funcionário chamado Carlos. Sabe-se que outro funcionário, João, tem salário equivalente a um terço do salário de Carlos. Carlos aplicará seu salário integralmente na caderneta de poupança, que rende 2% ao mê4s, e João aplicará seu salário integralmente no fundo de renda fixa, que rende 5% ao mês. O programa deverá calcular e mostrar a quantidade de meses necessários para que o valor pertencente a João iguale ou ultrapasse o valor pertencente a Carlos.

Algoritmo poupanca
	var salariocarlos, salariojoao, valorcarlos, valorjoao: real;
	    meses: Inteiro
Inicio
	Escreva("Digite o valor do salario do Carlos: ")
	Leia(salariocarlos)
	salariojoao <- salariocarlos / 3
	valorcarlos <- 0
	valorjoao <- 0
	meses <- 0
	Enquanto (valorcarlos > valorjoao) faca
		valorcarlos <- salariocarlos * 0.02
		valorjoao   <- salariojoao * 0.05
		meses <- meses + 1
	Fim_enquanto
	Escreva("Quantidade de meses para que valor de João alcance ou ultrapasse Carlos: ", meses) 	
Fim
	    

Faça um programa que leia um conjunto não determinado de valores e mostre o valor lido, seu quadrado, seu cubo e a sua raiz quadrada. Finalize a entrada de dados com um valor negativo ou zero.

Algoritmo valores
	var num: Inteiro
	    raiz: Real
Inicio
	Repita
		Escreva("Digite o numero: ")
		Leia(num)
		Escreva("Numero Digitado: ", num)
		Escreva("Quadrado do numero: ", SQR(num))
		Escreva("Cubo do numero: ", num^3)
		Escreva("Quadrado do numero: ", SQRT(num))
	Até_que(num <= 0)

Fim

Faça um programa que leia um valor N inteiro e positivo. Calcule e mostre o valor de E, conforme a fórmula a seguir:E = 1 + 1/1! + 1/2! + 1/3!+ ...+ 1/N!

Algoritmo valorE
	var e: Real
	    n, i, f: Inteiro
Inicio
	e <- 1
	f <- 1
	cont <- 1
	Escreva("Digite o valor do Inteiro N: ")
	Leia(n)
	Enquanto (cont <= n) faça
		para i de n até 1 passo -1 faça
			f = f * i
		fim_para
		e = e + 1/f	
		cont++
	fim_enquanto
	Escreva("Valor de E: ", e)	
fim
Faça um programa que receba vários números, calcule e mostre: * a soma dos números digitados. * a quantidade de números digitados. * a média dos números digitados. * o maior número digitado. * o menor número digitado. * a média dos números pares. * a porcentagem dos números ímpares entre todos os números digitados. Finalize a entrada de dados com a digitação do número 30.000.

Algoritmo valores
	var num, soma, qtdnum, maior, menor, cont_par, porcent_impar : Inteiro
	    raiz, media, media_pares: Real
Inicio
	soma <- 0
	maior <- 0
	menor <- 9999999999999
	cont_par <- 0
	qtd_num <- 0
	porcent_impar <- 0
	media <- 0
	media_pares <- 0
	Repita
		Escreva("Digite o numero: ")
		Leia(num)
		soma <- soma + num
		qtd_num <- qtd_num + 1
		Se(num > maior){
			maior <- num
		}
		maior <- num
		Se(num < menor){
			menor <- num
		}
		maior <- num
		Se(num mod 2 = 0)
			cont_par <- cont_par + 1 
		fim_se
	Até_que(num = 30000)
	Escreva("Soma: ", soma)
	Escreva("Qtd. de Numeros Digitados: ", qtd_num)
	Escreva("Média de Numeros Digitados: ", soma /qtd_num)
	Escreva("Maior Numero Digitado: ", maior)
	Escreva("Menor Numero Digitado: ", menor)
	Escreva("Média dos pares: ", (cont_par * 100 )/qtd_num)
Fim

1. Escreva um algoritmo que leia 20 nomes e imprima o primeiro caractere de cada nome.

Algoritmo lerletras
	Var nome: vetor[1..30] de caractere
	       i: inteiro
Inicio
	Para i de 1 até 20 passo 1 faça
		Escreva("Digite o nome: ")
		Leia(nome)
	fim_para
	Para i de 1 até 20 passo 1 faça
		Escreva("Primeiro Caracter do nome ",i,":", nome[1])
	fim_para
Fim  

2. Formule um algoritmo que entre com o nome do aluno e as notas de quatro
provas de 20 alunos. Imprima nome, nota1, nota2, nota3, nota4 e média de cada
aluno e informe a média geral da turma.

Algoritmo notaalunos
	Var nota1, nota2, nota3, nota4, mediaAluno, mediaTot, somaB : Real
	    nome: caractere
Inicio
	soma <- 0
	Para i de 1 até 20 passo 1 faça
		Escreva("Digite o nome do aluno ", i)
		Leia(nome)
		Escreva("Digite a nota ", i)
		Leia(nota1)
		Escreva("Digite o nome do aluno: ", i)
		Leia(nota2)
		Escreva("Digite o nome do aluno: ", i)
		Leia(nota3)
		Escreva("Digite o nome do aluno: ", i)
		Leia(nota4)
		mediaAluno = (nota1+nota2+nota3+nota4)/4
		soma = soma + nota1 + nota2 + nota3 + nota4
		Escreva("Média do Aluno: ", media)
	fim_para
	mediaTot = soma / 20
	Escreva ("Média da Turma: ", media)	
Fim
	
3. Escreva um algoritmo que leia a quantidade de números que se deseja digitar.
Em seguida, leia esses números e encontre o maior e o menor.

Algoritmo numeros
	Var num, maior, menor, cont, qtdNum: inteiro
Inicio
	cont <- 1;
	Escreva ("Digite a quantidade de numeros que deseja digitar: ")
	leia(qtdNum)
	Enquanto (cont <= qtdNum) faça
		Escreva ("Digite um numero: ")
		Leia (num)
		se(cont = 1)
			maior <- num
			menor <- num
		senão
			se(num > maior) então
				maior = num
			senão
				se (num < menor) então
					menor = num
				fim_se
			fim_se
		fim_se
		cont <- cont + 1
	fim_enquanto
	Escreva("Maior numero: ", maior)
	Escreva("Menor numero: ", menor)
Fim

5. Apresente todos os números divisíveis por 5 que sejam menores que 200.

Algoritmo divisivelpor5
	Var div, i: inteiro
Inicio
	div <- 0
	Para i de 0 até 199 passo 5 faça
		Escreva (i)			
	fim_para
Fim 

8. Uma indústria produz e vende vários produtos e para cada um deles têm-se os
seguintes dados: nome, quantidade produzida e quantidade vendida. Formule
um algoritmo que:
¦¦ Leia a quantidade de produtos que a empresa possui.
¦¦ Imprima nome e quantidade em estoque para os produtos com estoque menor
que 30.
¦¦ Imprima nome do produto com maior quantidade em estoque.

Algoritmo numeros
	Var qtdest, est_maior, est_menor, cont, qtdProd: inteiro
	    nome, prod_maior_est, prod_menor_est: caractere
Inicio
	cont <- 1;
	Escreva ("Digite a quantidade de Produtos: ")
	leia(qtdProd)
	Enquanto (cont <= qtdProd) faça
		Escreva ("Digite o Nome do Produto: ")
		Leia(nome)
		Escreva ("Digite a quantidade em estoque: ")
		Leia(qtdest)
		se(cont = 1) então
			est_maior <- qtdest
			est_menor <- qtdest
		senão
			se(qtdest > est_maior) então
				est_maior <- qtdest
				prod_maior_est <- nome
			senão
				se(qtdest < est_menor) então
					est_menor <- qtdest
					prod_menor_est <- nome
				fim_se
			fim_se
		fim_se
		se(qtdest < 30) então
			Escreva("Produto: ", nome)
			Escreva("Qtd estoque: ", qtdest)
		fim_se
		cont <- cont + 1
	fim_enquanto
	Escreva("Produto com maior estoque: ", prod_maior_est, " Qtd: ", est_maior)
	Escreva("Produto com menor estoque: ", prod_menor_est, " Qtd: ", est_menor)
Fim

9. Elabore uma algoritmo que imprima todas as tabuadas do 1 ao 10.

Algoritmo tabuada
	var i, j, mult: inteiro
Inicio
	Para i de 1 até 10 passo 1 faça
		Escreva ("Tabuada do ", i)
		para j de 1 até 10 faça
			mult = i * j
			Escreva (i, "x" , j, " = " , mult)
		fim_para
	fim_para
fim
	

1. Elabore um algoritmo que leia um vetor de 50 números inteiros e imprima o
maior e o menor número.

Algoritmo vetor1
	var num: vetor[1..50] de inteiro
	i, maior, menor: inteiro
Inicio
	Para i de 1 até 50 passo 1 faça
		Escreva("Digite o numero ", i, ":")
		Leia (num[i])
	fim_para
	Para i de 1 até 50 passo 1 faça
		se(i = 1) então
			maior <- num[i]
			menor <- num[i]
		senão
			se(num[i] > maior) então
				maior <- num[i]
			senão
				se(num[i] < menor) então
					menor <- num[i]
				fim_se
			fim_se
		fim_se
	fim_para
	Escreva ("Maior número: ", maior)
	Escreva ("Menor número: ", menor)	
Fim.

2. Escreva um algoritmo que leia dois vetores A e B, com 20 números inteiros. Efetue
a soma dos dois vetores em um vetor C e imprima o vetor C em ordem crescente.

Algoritmo somavetores
	var A, B, C: vetor[1..20] de inteiro
	    i, j, aux: inteiro
Inicio
	Para i de 1 até 20 passo 1 faça
		Escreva ("Digite o numero ", i, " do vetor A: ")
		Leia (A[i])
	Fim_para
	Para i de 1 até 20 passo 1 faça
		Escreva ("Digite o numero ", i, " do vetor B: ")
		Leia (B[i])
	Fim_para
	Para i de 1 até 20 passo 1 faça
		C[i] = A[i] + B[i] 
	fim_para
	Para i de 1 até 19 passo 1 faça
		para j de i + 1 até 20 faça
		Se (C[i] > C[j]) então
			aux <- c[i]
			c[i] <- c[j]
			c[j] <- aux
		fim_se
	fim_para
	Para i de 1 até 20 passo 1 faça
		Escreva (C[i])
	fim_para
fim
	 

3. Construa um algoritmo que leia o preço de compra e o preço de venda de 30
produtos e imprima o número de mercadorias que apresenta lucro < 15% e
quantas apresentam lucro > 30%.

Algoritmo lucro
	var valor: vetor[1..30, 1..3] de real
	    lucro, valorCompra, valorVenda: real
	    i, j: inteiro
Inicio
	Para i de 1 ate 5 passo 1 faca
		Para j de 1 ate 3 passo 1 faca
			se (j = 1) entao
				Escreva ("Digite o preço de compra do produto ",i,":")
				Leia (valor[i,j])
				valorCompra <- (valor[i,j])
			senao
				se (j = 2) entao
					Escreva ("Digite o preço de venda do produto ",i, ":")
					Leia (valor[i,j])
					valorVenda <- (valor[i,j])
				senao
					lucro <- ((valorVenda - valorCompra)/valorVenda) * 100;
               				valor[i,j] <- lucro
				fimse
			fimse
		fimpara
	fimpara
	Para i de 1 ate 5 passo 1 faca
		Para j de 3 ate 3 passo 1 faca
			se (valor[i,j] < 15) entao
				EscrevaL ("Produto ",i," - ",j ," possui lucro menor que 15%: ", valor[i,j],"%")
			senao
				se (valor[i,j] > 30) entao
					EscrevaL ("Produto ",i," - ",j ," possui lucro maior que 30%: ", valor[i,j],"%")
				fimse
			fimse
		fimpara
	fimpara
fim

4. Formule um algoritmo que leia uma matriz 5 x 5 de números inteiros e imprima
os elementos da diagonal principal.

Algoritmo diagonal
	Var mat: vetor[1..5, 1..5] de inteiro
	    l, c: inteiro
Inicio
	Para l de 1 ate 5 faca
		Para c de 1 ate 5 faca
			Escreva("Escreva um numero inteiro: ")
			Leia (mat[l,c])
		fim_para
	fim_para
	Para l de 1 ate 5 faca
		Para c de 1 ate 5 faca
			Se (l = c) entao
				Escreva(mat[l,c])
			fim_se
		fim_para
	fim_para	
Fim



5. Desenvolva um algoritmo que efetua a leitura dos nomes de 5 alunos e também
de suas quatro notas bimestrais. Calcule a média de cada aluno e apresente os
nomes classificados em ordem crescente de média.

Algoritmo alunos
Tipo
	cad_aluno: registro
	notas: vetor[1..4] de inteiro
	nome: caractere
	media: real
fim_registro
Var
	aluno: vetor[1..5] de cad_aluno
	i, j: inteiro
	soma, aux: real
Inicio
	soma <- 0
	Para i de 1 ate 5 faca
		Escreva("Digite o nome do aluno: ")
		Leia(aluno[i].nome)
		Para j de 1 ate 4 faca
			Escreva("Digite a nota ", j, " do aluno ", i, ":")
			Leia(aluno[i].notas[j])
			soma <- soma + aluno[i].notas[j]
		fim_para
		aluno[i].media <- soma / 4
	fim_para
	Para i de 1 ate 4 faca
		Para j de i + i ate 5 faca
			se (aluno[i].media > aluno[j].media) entao
				aux <- aluno[i].media
				aluno[i].media <- aluno[j].media
				aluno[j].media <- aux
			fim_se
		fim_para
	fim_para
	Para i de 1 ate 5 faca
		Escreva("Aluno : ", aluno[i].nome, " Nota: ", aluno[i].notas, " Média: ", aluno[i].media)
	fim_para	
Fim

6. Escreva um algoritmo que recebe duas matrizes inteiras de ordem 5 e imprima a
soma e a diferença entre elas.

algoritmo matrizOrdem5
var
	mat1: vetor[1..5, 1..5] de inteiro
	mat2: vetor[1..5, 1..5] de inteiro
	i, j: inteiro
inicio
	para i de 1 ate 5 faca
		para j de 1 ate 5 faca
			Escreva("Digite um numero ", i, ",", j, "da matriz 1: ")
			Leia(mat1[i,j])
		fim_para
	fim_para
	para i de 1 ate 5 faca
		para j de 1 ate 5 faca
			Escreva("Digite um numero ", i, ",", j, "da matriz 2: ")
			Leia(mat2[i,j])
		fim_para
	fim_para
	para i de 1 ate 5 faca
		para j de 1 ate 5 faca
			Escreva ("Diferenca das matrizes: ", mat1[i,j] - mat2[i,j])
		fim_para
	fim_para
	para i de 1 ate 5 faca
		para j de 1 ate 5 faca
			Escreva ("Soma das matrizes: ", mat1[i,j] + mat2[i,j])
		fim_para
	fim_para	
fim

7. Formule um algoritmo que receba os valores de contas a pagar de uma ao longo
do ano, de modo que cada linha representa um mês do ano e cada coluna uma
semana do mês. Com isso, temos uma matriz 12 x 4. Calcule e imprima: total de
contas a pagar por mês e o total anual.

8. Escreva a estrutura de um registro para um cadastro de livros contendo as seguintes
informações: título, autor, editora, edição e ano.

9. Elabore um cadastro para 15 professores, contendo as seguintes informações:
matrícula, nome, formação e salário. Desenvolva um menu que:
1. cadastre os professores;
2. imprima o nome dos professores por ordem crescente de salário;
3. pesquise um professor pela matrícula e informe nome e formação, caso exista;
4. saia do programa.

1. Desenvolva um cadastro de produtos que contenha código, descrição, unidade
e preço para 20 produtos. Defina um menu com as seguintes opções:
1. Cadastrar os 20 registros.
2. Pesquisar um produto pelo código.
3. Classificar por ordem de descrição os registros cadastrados.
4. Classificar por ordem de código.
5. Apresentar todos os registros.
6. Sair do programa de cadastro.

Algoritmo cadastro
Tipo	
	produtos: registro
	codigo: Inteiro
	descricao: caractere
	unidade: Inteiro
	preco: Real
fim_registro
Var
	produto: vetor[1..20] de produtos
	i, j, opcao: inteiro
Procedimento menu
	Var: 
		opcao: Inteiro
	Inicio
		Escreva("Cadastro Produtos")
		Escreva("1 - Cadastrar 20 registros ")
		Escreva("2 - Pesquisar um produto pelo código ")
		Escreva("3 - Classificar por ordem de descrição os registros cadastrados ")
		Escreva("4 - Classificar por ordem de código ")
		Escreva("5 - Apresentar todos os registros ")
		Escreva("6 - Sair do programa de cadastro ")
		Escreva("Escolha uma opção: ")
		Leia(opcao)
fim_procedimento
Procedimento cadastrar
	Inicio
		Para i de 1 até 20 passo 1 faça
			Escreva("Digite o código do produto ", i, ":")
			Leia(produto.codigo[i])
			Escreva("Descrição do produto ", i, ":")
			Leia(produto.descricao[i])
			Escreva("Quantidade do produto ", i, ":")
			Leia(produto.unidade[i])
			Escreva("Preço do produto ", i, ":")
			Leia(produto.preco[i])
		fim_para
		Escreva("Produtos Cadastrados")
fim_procedimento
Procedimento pesquisar
	var:
		cod: inteiro
	Inicio
	Escreva("Digite o código do produto: ")
	Leia (cod)
		Para i de 1 até 20 passo 1 faça
			Se (cod = produto.codigo[i]) então
				Escreva("Código do produto: ", produto.codigo[i])
				Escreva("Descrição do produto ", produto.descricao[i])
				Escreva("Quantidade do produto ", produto.unidade[i])
				Escreva("Preço do produto ", produto.preco[i])
			Senão
				Escreva("Produto não cadastrado!")
			Fim_se	
		fim_para
fim_procedimento
Inicio
	menu()
	Caso (opcao)
		Seja 1 faça cadastro
		Seja 2 faça pesquisar
			
			
	Fim_caso
Fim


Var
  X: caractere
  result: inteiro
funcao vogal(i: caractere): inteiro
Inicio
       Se(i = "A") ou (i = "E") ou (i = "I") ou (i = "O") ou (i = "U") entao
            retorne(1)
       Senao
            retorne(0)
       fimse
fimfuncao
Inicio
    Escreva ("Digite uma letra: ")
    Leia (x)
    result <- vogal(x)
    Escreva(result)
Fimalgoritmo

Algoritmo "und5"
//Elabore um programa com uma sub-rotina que apresente o somatório dos
//N primeiros
//números pares, definidos por um operador. O valor de N será informado
//pelo usuário.
Var
  N, cont, y: inteiro
procedimento soma(i: inteiro)
Inicio
      y <- 0
      Para cont de 0 ate i passo 1 faca
           se (cont%2 = 0) entao
              y <- y + cont
              EscrevaL("Par: ", cont)
           fimse
      fimpara
      EscrevaL("Soma dos pares: ", y)
fimprocedimento
Inicio
    Escreva ("Digite um número: ")
    Leia (N)
    soma(N)
Fimalgoritmo

Algoritmo "und5"
//5. Escreva um algoritmo que efetue a leitura de um número inteiro e apresente
//uma mensagem informando se o número é par ou ímpar.
Var
  N: inteiro
procedimento parouimpar(i: inteiro)
Inicio
      Se (i%2 = 0) entao
         EscrevaL("PAR")
      Senao
         EscrevaL("IMPAR")
      fimse
fimprocedimento
Inicio
    Escreva ("Digite um número: ")
    Leia (N)
    parouimpar(N)
Fimalgoritmo